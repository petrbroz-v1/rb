Use Case 1 – Saving a New Document (REQ_01)

Preconditions:
- The user has access to the API and permission to save a document.
- The DMS2 service is available.

Steps:
1. The user sends a POST request to the endpoint: /api/${REPOSITORY}/documents
2. The request is of type multipart/form-data and contains:
    - Required headers:
        - X-Api-Name
        - X-Request-Id
        - X-Correlation-Id
        - X-Request-App
        - X-User-Id
        - X-User-Roles
        - X-User-Type
    - metadata field in JSON format, containing:
        - businessId
        - documentType
        - dataEntries (an array with at least one record containing name and filename)
    - files field (binary content of the document)
3. The system processes the request and saves the document.
4. The system returns a response with a DocumentReference object containing:
    - uniqueId
    - dataEntries

Expected Result:
- The document is successfully saved (HTTP 201).
- The response contains uniqueId and dataEntries.
- The operation completes without error.

###################################################################
Use Case 2 – Search for a Document by ID (REQ_05)

Preconditions:
- A document with uniqueId = e58ed763-928c-4155-bee9-fdbaaadc15f3 exists.
- The user has permission to view it.

Steps:
1. The user sends a GET request to the endpoint: /api/${REPOSITORY}/documents/document?uniqueId=e58ed763-928c-4155-bee9-fdbaaadc15f3
2. Required headers:
    - X-Api-Name
    - X-Request-Id
    - X-Correlation-Id
    - X-Request-App
    - X-User-Id
    - X-User-Roles
    - X-User-Type
3. The system searches for the document based on the value of uniqueId.
4. The system returns a response containing:
    - uniqueId
    - documentType
    - dataEntries

Expected Result:
- The document is successfully found (HTTP 200).
- The response contains uniqueId, documentType, dataEntries.
- The operation completes without error.